#ifndef slic3r_TextConfiguration_hpp_
#define slic3r_TextConfiguration_hpp_

#include <vector>
#include <string>
#include <optional>

namespace Slic3r {

// represent selected font
// Name must be human readable is visible in gui
// (Path + Type) must define how to open font for using on different OS
struct FontItem
{
    std::string name;
    std::string path;
    enum class Type;
    Type type;

    FontItem() : type(Type::undefined){} // set undefined type
    FontItem(const std::string &name, const std::string &path, Type type)
        : name(name), path(path), type(type)
    {}

    // define data stored in path
    enum class Type { 
        undefined = 0,
        file_path, // TrueTypeFont file loacation on computer - for privacy: path is NOT stored into 3mf
        // wx font descriptors are platform dependent
        wx_win_font_descr, // path is font descriptor generated by wxWidgets on windows
        wx_lin_font_descr, // path is font descriptor generated by wxWidgets on windows
        wx_mac_font_descr // path is font descriptor generated by wxWidgets on windows
    };
};
using FontList = std::vector<FontItem>;    

// user defined font property
struct FontProp
{
    // define extra space between letters, negative mean closer letter
    int char_gap = 0;
    // define extra space between lines, negative mean closer lines
    int line_gap = 0;
    // Z depth of text [in mm]
    float emboss = 5;
    // TODO: add enum class Align: center/left/right
    
    //////
    // Duplicit data to wxFontDescriptor
    // used for store/load .3mf file
    //////

    // Height of letter [in mm], 
    // duplicit to wxFont::PointSize
    float size_in_mm = 10;
    // Define type of font
    // duplicit to wxFont::FaceName
    std::optional<std::string> face_name;
    std::optional<std::string> style;
    std::optional<std::string> weight;

    FontProp() = default;
};

// define how to create 'Text volume'
struct TextConfiguration
{
    // define font
    FontItem font_item;
    // user modification of font
    FontProp font_prop;

    std::string text = "None";

    TextConfiguration() = default; // optional needs empty constructor
    TextConfiguration(const FontItem &   font_item,
                      const FontProp &   font_prop,
                      const std::string &text)
        : font_item(font_item), font_prop(font_prop), text(text)
    {}
};    

} // namespace Slic3r

#endif // slic3r_TextConfiguration_hpp_
